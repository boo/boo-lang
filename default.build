<?xml version="1.0"?>
<project name="boo" default="all">

	<property name="debug" value="true" />
	<property name="optimize" value="false" />
	
	<property name="skip.satellites" value="false" />

	<property name="antlr.home" value="lib/antlr-2.7.4" />
	<property name="java" value="java" />
	
	<property name="antlr.jar" value="${antlr.home}/antlr.jar" />
	<property name="antlr.runtime.dll" value="${antlr.home}/lib/csharp/src/bin/antlr.runtime.dll" />	
	<property name="NAnt.Core.dll" value="${nant.location}/NAnt.Core.dll" />
	
	<property name="ngen.exe" value="${nant.settings.currentframework.frameworkdirectory}/ngen.exe" />
	<property name="skip.ngen" value="False" />
	<property name="skip.antlr" value="False" />
	<property name="skip.ast" value="False" />
	
	<property name="build.dir" value="build" />

	<target name="all" depends="booc, booi">	
	</target>
	
	<target name="test" depends="all">
		<nant buildfile="tests/default.build" />
	</target>
	
	<target name="booi" depends="Boo.NAnt">
		
		<booc
			target="exe"
			output="build/booi.exe"
			tracelevel="Info">
			
			<sources basedir="src/BooI">
				<includes name="*.boo" />
			</sources>
			
			<references basedir="build">
				<includes name="Boo.dll" />
			</references>
		</booc>		
		
		<boo>
		print("Hello from boo task!")		
		print(Project.TargetFramework.FrameworkAssemblyDirectory)
		</boo>
		
	</target>
	
	<target name="Boo.NAnt" depends="booc">
		<copy file="${NAnt.Core.dll}" todir="build" />
		<exec program="build/booc.exe" useruntimeengine="true">
			<arg value="/out:build/Boo.NAnt.dll" />
			<arg value="/target:library" />
			<arg value="/r:${NAnt.Core.dll}" />
			<arg value="-v" />
			<arg value="src/Boo.NAnt/BoocTask.boo" />
			<arg value="src/Boo.NAnt/BooTask.boo" />
			<arg value="src/Boo.NAnt/AbstractBooTask.boo" />			
		</exec>
		<loadtasks assembly="build/Boo.NAnt.dll" />
	</target>
	
	<target name="booc" depends="core">
		<csc target="exe" output="build/booc.exe" debug="${debug}" optimize="${optimize}">
			<sources basedir="src/BooC">
				<includes name="*.cs" />
			</sources>

			<references>
				<includes name="build/Boo.dll" />
				<includes name="build/Boo.Lang.Compiler.dll" />
			</references>
		</csc>
		
		<exec program='${ngen.exe}' if="${file::exists(ngen.exe)}" unless="${skip.ngen}">
			<arg file='build/Boo.dll' />
			<arg file='build/Boo.Lang.Compiler.dll' />			
			<arg file='build/Boo.AntlrParser.dll' />
			<arg file='build/booc.exe' />
			<arg file='build/antlr.runtime.dll' />
		</exec>
	</target>
	
	<target name="core" depends="Boo, Boo.Lang.Compiler, Boo.AntlrParser">
	</target>
	
	<target name="update-bin" depends="all">
		<mkdir dir="bin" />
		<copy todir="bin">
			<fileset basedir="build">
				<includes name="Boo.dll" />
				<includes name="Boo.Lang.Compiler.dll" />
				<includes name="Boo.NAnt.dll" />
				<includes name="Boo.AntlrParser.dll" />
				<includes name="antlr.runtime.dll" />
				<includes name="booc.exe" />
				<includes name="booi.exe" />
			</fileset>
		</copy>
	</target>
	
	<target name="Boo.Lang.Compiler" depends="Boo, generate-ast">
		<csc target="library"
			output="build/Boo.Lang.Compiler.dll"
			debug="${debug}"
			optimize="${optimize}">
			
			<sources basedir="src/Boo.Lang.Compiler">
				<includes name="**/*.cs" />
			</sources>
			
			<references>
				<includes name="build/Boo.dll" />
			</references>
		</csc>
	</target>

	<target name="Boo" depends="compile-grammar, satellites">

		<resgen
			input="src/Boo/Resources/strings.txt"
			output="build/strings.resources" />

		<csc
			target="library"
			output="build/Boo.dll"
			debug="${debug}"
			optimize="${optimize}">

			<sources basedir="src/Boo">
				<includes name="**/*.cs" />
			</sources>
			
			<resources basedir="build">
				<includes name="strings.resources" />
			</resources>
		</csc>
	</target>
	
	<target name="Boo.AntlrParser" depends="Boo.Lang.Compiler, compile-grammar">
		<csc target="library" output="build/Boo.AntlrParser.dll"
			debug="${debug}" optimize="${optimize}">
			<sources basedir="src/Boo.AntlrParser">
				<includes name="**/*.cs" />
			</sources>
			<references>
				<includes name="build/Boo.dll" />
				<includes name="build/Boo.Lang.Compiler.dll" />
				<includes name="build/antlr.runtime.dll" />
			</references>
		</csc>
	</target>
	
	<target name="bin-distro">
		<zip zipfile="boo-bin.zip" ziplevel="9">
			<fileset>
				<includes name="license.txt" />
				<includes name="ast.model.boo" />
				<includes name="docs/**/*.boo" />
				<includes name="docs/**/*.build" />
				<includes name="docs/**/*.pdf" />
				<includes name="build/*.dll" />
				<includes name="build/*.exe" />
				
				<includes name="extras/boo.xml" />
				<includes name="extras/SharpDevelop/boo.xshd" />
				
				<includes name="examples/**/*.boo" />
				<includes name="examples/**/*.aspx" />
				<includes name="examples/**/*.build" />
				<includes name="examples/**/*.config" />
			</fileset>
		</zip>
	</target>
	
	<target name="src-distro">
		<zip zipfile="boo-src.zip" ziplevel="9">
			<fileset>
				<includes name="license.txt" />
				<includes name="boo.build" />				
				<includes name="ast.model.boo" />
				
				<includes name="scripts/*.boo" />
				
				<includes name="lib/**/*.jar" />
				<includes name="lib/**/*.dll" />
				
				<includes name="src/**/*.cs" />
				<includes name="src/**/*.boo" />
				<includes name="src/**/*.g" />
				<includes name="src/**/*.prjx" />
				<includes name="src/Boo/Resources/strings.txt" />
				<includes name="src/Boo/Resources/pt/strings.txt" />
				
				<includes name="bin/*.dll" />
				<includes name="bin/*.exe" />
				
				<includes name="tests/**/*.boo" />
				<includes name="tests/**/*.cs" />
				<includes name="tests/**/*.txt" />
				<includes name="tests/**/*.build" />
				
				<includes name="extras/boo.xml" />
				<includes name="extras/SharpDevelop/boo.xshd" />
				
				<includes name="examples/**/*.boo" />
				<includes name="examples/**/*.aspx" />
				<includes name="examples/**/*.build" />
				<includes name="examples/**/*.config" />
				
				<includes name="docs/**/*.boo" />
				<includes name="docs/**/*.build" />
				<includes name="docs/**/*.sxw" />
			</fileset>
		</zip>
	</target>
	
	<target name="satellites" depends="init" unless="${skip.satellites}">
		<mkdir dir="${build.dir}/pt" />

		<resgen
			input="src/Boo/Resources/pt/strings.txt"
			output="build/pt/strings.pt.resources" />

		<al target="lib" culture="pt" output="build/pt/Boo.resources.dll">
			<sources basedir="build/pt">
				<includes name="strings.pt.resources" />
			</sources>
		</al>
	</target>

	<target name="compile-grammar" depends="init" unless="${skip.antlr}">

		<if test="${not file::up-to-date('src/Boo.AntlrParser/boo.g', 'src/Boo.AntlrParser/BooParserBase.cs')}">
		
			<delete>
				<fileset basedir="src/Boo.AntlrParser">
					<includes name="*TokenTypes.*" />
				</fileset>
			</delete>			 
			
			<exec program="${java}" failonerror="true">
				<arg value="-cp" />
				<arg value="${antlr.jar}" />
				<arg value="antlr.Tool" />
				<arg value="-o" />
				<arg value="src/Boo.AntlrParser/" />
				<arg value="src/Boo.AntlrParser/boo.g" />
			</exec>
			
			<exec program="${java}" failonerror="true">
				<arg value="-cp" />
				<arg value="${antlr.jar}" />
				<arg value="antlr.Tool" />
				<arg value="-o" />
				<arg value="src/Boo.AntlrParser/" />
				<arg value="src/Boo.AntlrParser/booel.g" />
			</exec>
			
			<touch file="src/Boo.AntlrParser/BooParserBase.cs" />
		</if>
	</target>
	
	<target name="generate-ast" depends="init" unless="${skip.ast}">
		<if test="${not file::up-to-date('ast.model.boo', 'src/Boo.Lang.Compiler/Ast/Impl/CompileUnitImpl.cs')}">
		
			<delete dir="src/Boo.Lang.Compiler/Ast/Impl"
					if="${directory::exists('src/Boo.Lang.Compiler/Ast/Impl')}" />
			<mkdir dir="src/Boo.Lang.Compiler/Ast/Impl" />
			<exec program="bin/booi.exe" useruntimeengine="true">
				<arg value="scripts/astgen.boo" />
			</exec>
			
		</if>
	</target>

	<target name="rebuild" depends="clean">
		
		<touch file="ast.model.boo" />
		<touch file="src/Boo.AntlrParser/boo.g" />
		<touch file="src/Boo.AntlrParser/booel.g" />
		
		<call target="all" />		
	</target>
	
	<target name="clean">
		<delete dir="build" failonerror="false" />
	</target>

	<target name="init">
		<mkdir dir="build" />
		<copy file="${antlr.runtime.dll}" todir="build" />
	</target>

</project>

<?xml version="1.0"?>
<project name="boo" default="all">

	<property name="debug" value="true" />
	<property name="optimize" value="false" />
	
	<property name="skip.satellites" value="false" />

	<property name="antlr.home" value="lib/antlr-2.7.4" />
	<property name="java" value="java" />
	
	<property name="antlr.jar" value="${antlr.home}/antlr.jar" />
	<property name="antlr.runtime.dll" value="${antlr.home}/lib/csharp/src/bin/antlr.runtime.dll" />	
	<property name="NAnt.Core.dll" value="${nant.location}/NAnt.Core.dll" />
	
	<property name="ngen.exe" value="${nant.settings.currentframework.frameworkdirectory}/ngen.exe" />
	<property name="skip.ngen" value="False" />
	<property name="skip.antlr" value="False" />
	<property name="skip.ast" value="False" />
	
	<property name="build.dir" value="build" />
	
	<include buildfile="build.properties" if="${file::exists('build.properties')}" />

	<target name="all" depends="booc, booi, booish">	
	</target>
	
	<target name="test" depends="all">
		<nant buildfile="tests/default.build" target="run" />
	</target>
	
	<target name="compile-tests" depends="all">
		<nant buildfile="tests/default.build" target="compile" />
	</target>
	
	<target name="booish" depends="Boo.NAnt">
		<booc
			target="exe"
			output="build/booish.exe">
			
			<sources basedir="src/booish">
				<include name="*.boo" />
			</sources>
		</booc>
	</target>
	
	<target name="booi" depends="Boo.NAnt">

		<booc
			target="exe"
			output="build/booi.exe"
			tracelevel="Verbose">
			
			<sources basedir="src/booi">
				<include name="*.boo" />
			</sources>
		</booc>		

		<boo>
		print("Hello from boo task!")		
		print("Framework directory: ${Project.TargetFramework.FrameworkAssemblyDirectory}")
		</boo>
		
	</target>
	
	<target name="dump-properties" depends="Boo.NAnt">
		<boo>
		for p as System.Collections.DictionaryEntry in Project.Properties:
			print("${p.Key}: ${p.Value}")		
		</boo>
	</target>
	
	<target name="Boo.NAnt" depends="booc">
		<copy file="${NAnt.Core.dll}" todir="build" />
		
		<uptodate property="Boo.NAnt-is-uptodate">
			<sourcefiles basedir="src/Boo.NAnt">
				<include name="*.boo" />
			</sourcefiles>
			<targetfiles>
				<include name="build/Boo.NAnt.dll" />
			</targetfiles>
		</uptodate>
		
		<property name="NAnt.Core.dll" value="build/NAnt.Core.dll"
			if="${'net-2.0' == framework::get-target-framework()}" />
			
		<exec program="build/booc.exe" useruntimeengine="true" unless="${Boo.NAnt-is-uptodate}">		
			<arg value="-v" />
			<arg value="-out:build/Boo.NAnt.dll" />
			<arg value="-target:library" />
			<arg value="-r:${NAnt.Core.dll}" />
			<arg value="src/Boo.NAnt/BoocTask.boo" />
			<arg value="src/Boo.NAnt/BooTask.boo" />
			<arg value="src/Boo.NAnt/AbstractBooTask.boo" />			
		</exec>
		
		<loadtasks assembly="build/Boo.NAnt.dll" />
	</target>
	
	<target name="booc" depends="core">
		<csc target="exe" output="build/booc.exe" debug="${debug}" optimize="${optimize}">
			<sources basedir="src/booc">
				<include name="*.cs" />
			</sources>

			<references>
				<include name="build/Boo.dll" />
				<include name="build/Boo.Lang.Compiler.dll" />
			</references>
		</csc>
		
		<copy todir="build" file="src/booc/booc.rsp" />
		
		<exec program='${ngen.exe}' if="${file::exists(ngen.exe)}" unless="${skip.ngen}">
			<arg file='build/Boo.dll' />
			<arg file='build/Boo.Lang.Compiler.dll' />			
			<arg file='build/Boo.AntlrParser.dll' />
			<arg file='build/booc.exe' />
			<arg file='build/antlr.runtime.dll' />
		</exec>
	</target>
	
	<target name="core" depends="Boo, Boo.Lang.Compiler, Boo.AntlrParser">
	</target>
	
	<target name="update-bin" depends="all">
		<mkdir dir="bin" />
		<copy todir="bin">
			<fileset basedir="build">
				<include name="pt/Boo.resources.dll" />
				<include name="Boo.dll" />
				<include name="Boo.Lang.Compiler.dll" />
				<include name="Boo.NAnt.dll" />
				<include name="Boo.AntlrParser.dll" />
				<include name="antlr.runtime.dll" />
				<include name="booc.exe" />
				<include name="booc.rsp" />
				<include name="booi.exe" />
				<include name="booish.exe" />	
			</fileset>
		</copy>
	</target>
	
	<target name="Boo.Lang.Compiler" depends="Boo, generate-ast">
		<csc target="library"
			output="build/Boo.Lang.Compiler.dll"
			debug="${debug}"
			optimize="${optimize}">
			
			<sources basedir="src/Boo.Lang.Compiler">
				<include name="**/*.cs" />
			</sources>
			
			<references>
				<include name="build/Boo.dll" />
			</references>
		</csc>
	</target>

	<target name="Boo" depends="compile-grammar, satellites">

		<resgen
			input="src/Boo/Resources/strings.txt"
			output="build/strings.resources" />

		<csc
			target="library"
			output="build/Boo.dll"
			debug="${debug}"
			optimize="${optimize}">

			<sources basedir="src/Boo">
				<include name="**/*.cs" />
			</sources>
			
			<resources basedir="build">
				<include name="strings.resources" />
			</resources>
		</csc>
	</target>
	
	<target name="Boo.AntlrParser" depends="Boo.Lang.Compiler, compile-grammar">
		<csc target="library" output="build/Boo.AntlrParser.dll"
			debug="${debug}" optimize="${optimize}">
			<sources basedir="src/Boo.AntlrParser">
				<include name="**/*.cs" />
			</sources>
			<references>
				<include name="build/Boo.dll" />
				<include name="build/Boo.Lang.Compiler.dll" />
				<include name="build/antlr.runtime.dll" />
			</references>
		</csc>
	</target>
	
	<target name="insert-notice">
		<exec program="bin/booi.exe" useruntimeengine="true">
			<arg file="scripts/insertnotice.boo" />
		</exec>
	</target>
	
	<target name="update-stable-branch" depends="SVNUtil">
		<boo src="scripts/update-stable-branch.boo">
			<references basedir="build">
				<include name="SVNUtil.dll" />
			</references>
		</boo>		
	</target>
	
	<target name="create-distro-tag" depends="SVNUtil">
		<boo src="scripts/create-distro-tag.boo">
			<references basedir="build">
				<include name="SVNUtil.dll" />
			</references>
		</boo>
	</target>
	
	<target name="SVNUtil" depends="Boo.NAnt">
		<booc target="library" output="build/SVNUtil.dll">
			<sources basedir="scripts">
				<include name="SVNUtil.boo" />
			</sources>
		</booc>
	</target>
	
	<target name="upload-distro" depends="distro">
		<exec program="scp">
			<arg value="-B" />
			<arg file="boo-${distro-version}-bin.zip" />
			<arg file="boo-${distro-version}-src.zip" />
			<arg value="${distro-user}@beaver.codehaus.org:/home/projects/boo/dist/distributions/" />
		</exec>
	</target>
	
	<target name="distro" depends="check-distro-version, src-distro, bin-distro">
	</target>
	
	<target name="check-distro-version" unless="${property::exists('distro-version')}">
		<fail>You must specify the distro-version property!</fail>
	</target>
	
	<target name="bin-distro">
		<zip zipfile="boo-${distro-version}-bin.zip" ziplevel="9">
			<fileset>
				<include name="readme.txt" />
				<include name="license.txt" />
				<include name="ast.model.boo" />
				<include name="docs/**/*.boo" />
				<include name="docs/**/*.build" />
				<include name="docs/**/*.sxw" />
				<include name="bin/**/*.dll" />
				<include name="bin/*.exe" />
				<include name="bin/*.rsp" />
				
				<include name="extras/boo.lang" />
				<include name="extras/install-gtksourceview-mode" />
				<include name="extras/boo*.xml" />
				<include name="extras/SharpDevelop/boo.xshd" />
				<include name="extras/boox/**/*.boo" />
				<include name="extras/boox/**/*.build" />
				<include name="extras/boox/resources/**/*.png" />
				<include name="extras/boox/resources/**/*.ico" />
				
				<include name="examples/**/*.boo" />
				<include name="examples/**/*.xml" />
				<include name="examples/**/*.aspx" />
				<include name="examples/**/*.build" />
				<include name="examples/**/*.config" />
			</fileset>
		</zip>
	</target>
	
	<target name="src-distro" depends="insert-notice">
		<zip zipfile="boo-${distro-version}-src.zip" ziplevel="9">
			<fileset>
				<include name="readme.txt" />
				<include name="license.txt" />
				<include name="notice.txt" />
				<include name="ast.model.boo" />
				<include name="docs/**/*.boo" />
				<include name="docs/**/*.build" />
				<include name="docs/**/*.sxw" />
				<include name="bin/**/*.dll" />
				<include name="bin/*.exe" />
				<include name="bin/*.rsp" />
				
				<include name="extras/boo.lang" />
				<include name="extras/install-gtksourceview-mode" />
				<include name="extras/boo*.xml" />
				<include name="extras/SharpDevelop/boo.xshd" />
				<include name="extras/boox/**/*.boo" />
				<include name="extras/boox/**/*.build" />
				<include name="extras/boox/resources/**/*.png" />
				<include name="extras/boox/resources/**/*.ico" />
				
				<include name="examples/**/*.boo" />
				<include name="examples/**/*.xml" />
				<include name="examples/**/*.aspx" />
				<include name="examples/**/*.build" />
				<include name="examples/**/*.config" />
				
				<include name="default.build" />
				<include name="scripts/*.boo" />				
				<include name="lib/**/*.jar" />
				<include name="lib/**/*.dll" />
				
				<include name="src/**/*.cs" />
				<include name="src/**/*.boo" />
				<include name="src/**/*.rsp" />
				<include name="src/**/*.g" />
				<include name="src/**/*.prjx" />
				<include name="src/Boo/Resources/strings.txt" />
				<include name="src/Boo/Resources/pt/strings.txt" />
				
				<include name="tests/**/*.boo" />
				<include name="tests/**/*.cs" />
				<include name="tests/**/*.txt" />
				<include name="tests/**/*.build" />
				<include name="tests/**/*.prjx" />
			</fileset>
		</zip>
	</target>
	
	<target name="satellites" depends="init" unless="${skip.satellites}">
		<mkdir dir="${build.dir}/pt" />

		<resgen
			input="src/Boo/Resources/pt/strings.txt"
			output="build/pt/strings.pt.resources" />

		<al target="lib"
			culture="pt"
			output="build/pt/Boo.resources.dll"
			if="${nant.platform.win32}">
			<sources basedir="build/pt">
				<include name="strings.pt.resources" />
			</sources>
		</al>
		
		<exec program="${path::combine(nant.settings.currentframework.sdkdirectory, 'al')}" if="${nant.platform.unix}">
			<arg value="/target:lib" />
			<arg value="/culture:pt" />
			<arg value="/out:build/pt/Boo.resources.dll" />
			<arg value="/embed:build/pt/strings.pt.resources" />
		</exec>
	</target>

	<target name="compile-grammar" depends="init" unless="${skip.antlr}">
	
		<uptodate property="parser-is-uptodate">
			<sourcefiles basedir="src/Boo.AntlrParser">
				<include name="boo.g" />
				<include name="booel.g" />
			</sourcefiles>
			<targetfiles basedir="src/Boo.AntlrParser">
				<include name="BooParserBase.cs" />
				<include name="BooExpressionLexer.cs" />
			</targetfiles>
		</uptodate>

		<if test="${not parser-is-uptodate}">
		
			<delete>
				<fileset basedir="src/Boo.AntlrParser">
					<include name="*TokenTypes.*" />
				</fileset>
			</delete>			 
			
			<exec program="${java}" failonerror="true">				
				<arg value="-cp" />
				<arg value="${antlr.jar}" />
				<arg value="antlr.Tool" />
				<!-- <arg value="-traceParser" /> -->
				<arg value="-o" />
				<arg value="src/Boo.AntlrParser/" />
				<arg value="src/Boo.AntlrParser/boo.g" />
			</exec>
			
			<exec program="${java}" failonerror="true">
				<arg value="-cp" />
				<arg value="${antlr.jar}" />
				<arg value="antlr.Tool" />
				<arg value="-o" />
				<arg value="src/Boo.AntlrParser/" />
				<arg value="src/Boo.AntlrParser/booel.g" />
			</exec>
			
			<touch file="src/Boo.AntlrParser/BooParserBase.cs" />
		</if>
	</target>
	
	<target name="generate-ast" depends="init" unless="${skip.ast}">
	
		<uptodate property="ast-is-uptodate">
			<sourcefiles>
				<include name="ast.model.boo" />
				<include name="scripts/astgen.boo" />
			</sourcefiles>
			<targetfiles>
				<include name="src/Boo.Lang.Compiler/Ast/Impl/CompileUnitImpl.cs" />
			</targetfiles>
		</uptodate>
				
		<if test="${not ast-is-uptodate}">
		
			<delete dir="src/Boo.Lang.Compiler/Ast/Impl"
					if="${directory::exists('src/Boo.Lang.Compiler/Ast/Impl')}" />
			<mkdir dir="src/Boo.Lang.Compiler/Ast/Impl" />
			<exec program="bin/booi.exe" useruntimeengine="true">
				<arg value="scripts/astgen.boo" />
			</exec>			
		</if>
	</target>

	<target name="rebuild" depends="clean">
		
		<touch file="ast.model.boo" />
		<touch file="src/Boo.AntlrParser/boo.g" />
		<touch file="src/Boo.AntlrParser/booel.g" />
		
		<call target="all" />		
	</target>
	
	<target name="clean">
		<delete dir="build" failonerror="false" />
	</target>

	<target name="init">
		<mkdir dir="build" />
		<copy file="${antlr.runtime.dll}" todir="build" />
	</target>

</project>

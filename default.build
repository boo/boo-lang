<?xml version="1.0"?>
<project name="boo" default="all">

	<property name="debug" value="true" />
	<property name="optimize" value="false" />

	<property name="antlr.home" value="lib/antlr-2.7.4" />
	<property name="java" value="java" />
	
	<property name="antlr.jar" value="${antlr.home}/antlr.jar" />	
	<property name="NAnt.Core.dll" value="${nant.location}/NAnt.Core.dll" />
	
	<property name="ngen.exe" value="${nant.settings.currentframework.frameworkdirectory}/ngen.exe" />
	<property name="skip.ngen" value="False" />
	<property name="skip.antlr" value="False" />
	<property name="skip.ast" value="False" />
	
	<property name="build.dir" value="build" />
	
	<include buildfile="build.properties" if="${file::exists('build.properties')}" />

	<target name="all" depends="booc, booi, booish">	
	</target>
	
	<target name="test" depends="all">
		<nant buildfile="tests/default.build" target="run" />
	</target>
	
	<target name="compile-tests" depends="all">
		<nant buildfile="tests/default.build" target="compile" />
	</target>
	
	<target name="booish" depends="Boo.Lang.Interpreter">
		<booc
			target="exe"
			output="build/booish.exe">
			
			<sources basedir="src/booish">
				<include name="*.boo" />
			</sources>
			
			<references basedir="build">
				<include name="Boo.Lang.Interpreter.dll" />
			</references>
		</booc>
	</target>
	
	<target name="booi" depends="Boo.NAnt.Tasks">

		<booc
			target="exe"
			output="build/booi.exe"
			tracelevel="Verbose">
			
			<sources basedir="src/booi">
				<include name="*.boo" />
			</sources>
		</booc>		

		<boo>
		print("Hello from boo task!")		
		print("Framework directory: ${Project.TargetFramework.FrameworkAssemblyDirectory}")
		</boo>
		
	</target>
	
	<target name="dump-properties" depends="Boo.NAnt.Tasks">
		<boo>
		for p as System.Collections.DictionaryEntry in Project.Properties:
			print("${p.Key}: ${p.Value}")		
		</boo>
	</target>
	
	<target name="Boo.Lang.Interpreter" depends="Boo.NAnt.Tasks">
		<exec program="build/booc.exe" useruntimeengine="true">
			<arg value="-noconfig" />
			<arg value="-t:library" />
			<arg value="-v" />
			<arg value="-out:build/Boo.Lang.Interpreter.dll" />
			<arg value="src/Boo.Lang.Interpreter/AssemblyInfo.boo" />
			<arg value="src/Boo.Lang.Interpreter/InteractiveInterpreter.boo" />
		</exec>
		<!--
		* mono doesn't seem to be able to load Boo.Lang.Interpreter.dll
		that was just built, either we must wait mono to implement
		the ms.net behavior or change booc to delegate to the command
		line utility
		<booc 
			target="library"
			output="build/Boo.Lang.Interpreter.dll">
			
			<sources basedir="src/Boo.Lang.Interpreter">
				<include name="*.boo" />
			</sources>
		</booc>
		-->
	</target>
	
	<target name="Boo.NAnt.Tasks" depends="booc">
		<copy file="${NAnt.Core.dll}" todir="build" />
		
		<uptodate property="Boo.NAnt.Tasks-is-uptodate">
			<sourcefiles basedir="src/Boo.NAnt.Tasks">
				<include name="*.boo" />
			</sourcefiles>
			<targetfiles>
				<include name="build/Boo.NAnt.Tasks.dll" />
			</targetfiles>
		</uptodate>
		
		<property name="NAnt.Core.dll" value="build/NAnt.Core.dll"
			if="${'net-2.0' == framework::get-target-framework()}" />
			
		<exec program="build/booc.exe" useruntimeengine="true" unless="${Boo.NAnt.Tasks-is-uptodate}">		
			<arg value="-v" />
			<arg value="-out:build/Boo.NAnt.Tasks.dll" />
			<arg value="-target:library" />
			<arg value="-r:${NAnt.Core.dll}" />
			<arg value="src/Boo.NAnt.Tasks/InsertLicenseTask.boo" />
			<arg value="src/Boo.NAnt.Tasks/BoocTask.boo" />
			<arg value="src/Boo.NAnt.Tasks/BooTask.boo" />
			<arg value="src/Boo.NAnt.Tasks/AbstractBooTask.boo" />			
		</exec>
		
		<loadtasks assembly="build/Boo.NAnt.Tasks.dll" />
	</target>
	
	<target name="booc" depends="core">
		<csc target="exe" output="build/booc.exe" debug="${debug}" optimize="${optimize}">
			<sources basedir="src/booc">
				<include name="*.cs" />
			</sources>

			<references>
				<include name="build/Boo.dll" />
				<include name="build/Boo.Lang.Compiler.dll" />
			</references>
		</csc>
		
		<copy todir="build" file="src/booc/booc.rsp" />
		
		<exec program='${ngen.exe}' if="${file::exists(ngen.exe)}" unless="${skip.ngen}">
			<arg file='build/Boo.dll' />
			<arg file='build/Boo.Lang.Compiler.dll' />			
			<arg file='build/Boo.Lang.Parser.dll' />
			<arg file='build/booc.exe' />
		</exec>
	</target>
	
	<target name="core" depends="Boo, Boo.Lang.Compiler, Boo.Lang.Parser, Boo.CodeDom">
	</target>
	
	<target name="update-bin" depends="all">
		<mkdir dir="bin" />
		<copy todir="bin">
			<fileset basedir="build">
				<include name="pt/Boo.resources.dll" />
				<include name="Boo.dll" />
				<include name="Boo.Lang.Parser.dll" />
				<include name="Boo.Lang.Compiler.dll" />
				<include name="Boo.Lang.Interpreter.dll" />
				<include name="Boo.NAnt.Tasks.dll" />
				<include name="Boo.CodeDom.dll" />
				<include name="booc.exe" />
				<include name="booc.rsp" />
				<include name="booi.exe" />
				<include name="booish.exe" />	
			</fileset>
		</copy>
	</target>
	
	<target name="Boo.CodeDom" depends="Boo.Lang.Compiler">
		<csc target="library"
			output="build/Boo.CodeDom.dll"
			debug="${debug}"
			optimize="${optimize}">
			
			<sources basedir="src/Boo.CodeDom">
				<include name="**/*.cs" />
			</sources>
			
			<references>
				<include name="System.Data.dll" />
				<include name="System.Xml.dll" />
				<include name="build/Boo.Lang.Compiler.dll" />
			</references>
		</csc>
	</target>
	
	<target name="Boo.Lang.Compiler" depends="Boo, generate-ast">
		<csc target="library"
			output="build/Boo.Lang.Compiler.dll"
			debug="${debug}"
			optimize="${optimize}">
			
			<sources basedir="src/Boo.Lang.Compiler">
				<include name="**/*.cs" />
			</sources>
			
			<references>
				<include name="build/Boo.dll" />
			</references>
		</csc>
	</target>

	<target name="Boo" depends="resources">
		<csc
			target="library"
			output="build/Boo.dll"
			debug="${debug}"
			optimize="${optimize}"
			if="${nant.platform.win32}">

			<sources basedir="src/Boo">
				<include name="**/*.cs" />
			</sources>
			
			<resources basedir="build">
				<include name="strings.resources" />
			</resources>
			<resources basedir="build/pt">
				<include name="strings.pt.resources" />
			</resources>
			<resources basedir="build/it">
				<include name="strings.it.resources" />
			</resources>
		</csc>
		
		<csc
			target="library"
			output="build/Boo.dll"
			debug="${debug}"
			optimize="${optimize}"
			unless="${nant.platform.win32}">

			<sources basedir="src/Boo">
				<include name="**/*.cs" />
			</sources>
			
			<resources basedir="build">
				<include name="strings.resources" />
			</resources>
		</csc>
	</target>
	
	<target name="Boo.Lang.Parser" depends="Boo.Lang.Compiler, compile-grammar">
		<csc target="library" output="build/Boo.Lang.Parser.dll"
			debug="${debug}" optimize="${optimize}">
			<sources basedir="src/Boo.Lang.Parser">
				<include name="**/*.cs" />
			</sources>
			<references>
				<include name="build/Boo.dll" />
				<include name="build/Boo.Lang.Compiler.dll" />
			</references>
		</csc>
	</target>
	
	<target name="insert-license" depends="Boo.NAnt.Tasks">
		<insertLicense license="notice.txt">
			<fileset basedir="src">
				<include name="**/*.cs" />
				<include name="**/*.boo" />
				<exclude name="Boo.Lang.Parser/antlr/**" />
			</fileset>
			<fileset basedir="examples">
				<include name="**/*.boo" />
			</fileset>
		</insertLicense>
	</target>
	
	<target name="update-stable-branch" depends="SVNUtil">
		<boo src="scripts/update-stable-branch.boo">
			<references basedir="build">
				<include name="SVNUtil.dll" />
			</references>
		</boo>		
	</target>
	
	<target name="create-distro-tag" depends="SVNUtil">
		<boo src="scripts/create-distro-tag.boo">
			<references basedir="build">
				<include name="SVNUtil.dll" />
			</references>
		</boo>
	</target>
	
	<target name="SVNUtil" depends="Boo.NAnt.Tasks">
		<booc target="library" output="build/SVNUtil.dll">
			<sources basedir="scripts">
				<include name="SVNUtil.boo" />
			</sources>
		</booc>
	</target>
	
	<target name="upload-distro" depends="distro">
		<exec program="scp">
			<arg value="-B" />
			<arg file="boo-${distro-version}-bin.zip" />
			<arg file="boo-${distro-version}-src.zip" />
			<arg value="${distro-user}@beaver.codehaus.org:/home/projects/boo/dist/distributions/" />
		</exec>
	</target>
	
	<target name="distro" depends="check-distro-version, src-distro">
	</target>
	
	<target name="check-distro-version" unless="${property::exists('distro-version')}">
		<fail>You must specify the distro-version property!</fail>
	</target>
	
	<target name="prepare-bin-distro" depends="insert-license">
		<property name="distro.dir" value="build/distro" />
		
		<delete dir="${distro.dir}" if="${directory::exists(distro.dir)}" />
		<mkdir dir="${distro.dir}" />
		
		<copy todir="${distro.dir}">
			<fileset>
				<include name="readme.txt" />
				<include name="license.txt" />
				<include name="ast.model.boo" />
				<include name="docs/**/*.boo" />
				<include name="docs/**/*.build" />
				<include name="docs/**/*.sxw" />
				<include name="bin/**/*.dll" />
				<include name="bin/*.exe" />
				<include name="bin/*.rsp" />
				
				<include name="extras/**/*.boo" />
				<include name="extras/**/*.cs" />
				<include name="extras/**/*.png" />
				<include name="extras/**/*.ico" />
				<include name="extras/**/*.prjx" />
				<include name="extras/**/*.xml" />
				<include name="extras/**/*.build" />
				<include name="extras/**/*.lang" />
				<include name="extras/install-gtksourceview-mode" />
				<include name="extras/SharpDevelop/**/*.xshd" />
				<include name="extras/SharpDevelop/**/*.xft" />
				<include name="extras/SharpDevelop/**/*.xpt" />
				<include name="extras/SharpDevelop/**/*.txtres" />
				<include name="extras/SharpDevelop/**/*.addin" />
				
				<include name="examples/**/*.boo" />
				<include name="examples/**/*.xml" />
				<include name="examples/**/*.aspx" />
				<include name="examples/**/*.build" />
				<include name="examples/**/*.config" />
			</fileset>
		</copy>
	</target>
	
	<target name="bin-distro" depends="prepare-bin-distro">
		<zip zipfile="boo-${distro-version}-bin.zip" ziplevel="9">
			<fileset basedir="${distro.dir}">
				<include name="**" />
			</fileset>
		</zip>
	</target>
	
	<target name="prepare-src-distro" depends="bin-distro">
		<copy todir="${distro.dir}">
			<fileset>				
				<include name="default.build" />
				<include name="notice.txt" />
				<include name="scripts/*.boo" />				
				<include name="lib/**/*.jar" />
				<include name="lib/**/*.dll" />
				<include name="lib/**/*.txt" />
				
				<include name="src/boo.snk" />
				<include name="src/**/*.cs" />
				<include name="src/**/*.boo" />
				<include name="src/**/*.rsp" />
				<include name="src/**/*.g" />
				<include name="src/**/*.prjx" />
				<include name="src/**/*.cmbx" />
				<include name="src/Boo/Resources/**/*.txt" />
				
				<include name="tests/nunit.inc" />
				<include name="tests/test.snk" />
				<include name="tests/**/*.boo" />
				<include name="tests/**/*.cs" />
				<include name="tests/**/*.txt" />
				<include name="tests/**/*.build" />
				<include name="tests/**/*.prjx" />
			</fileset>
		</copy>
	</target>
	
	<target name="src-distro" depends="prepare-src-distro">
		<zip zipfile="boo-${distro-version}-src.zip" ziplevel="9">
			<fileset basedir="${distro.dir}">
				<include name="**" />
			</fileset>
		</zip>
	</target>
	
	<target name="resources" depends="init">
	
		<resgen
			input="src/Boo/Resources/strings.txt"
			output="build/strings.resources" />
	
		<property name="locale" value="pt" />
		<call target="build-resource" />
		
		<property name="locale" value="it" />
		<call target="build-resource" />
		
	</target>
	
	<target name="build-resource">
	
		<mkdir dir="${build.dir}/${locale}" />
		<resgen
			input="src/Boo/Resources/${locale}/strings.txt"
			output="build/${locale}/strings.${locale}.resources" />
			
	</target>

	<target name="compile-grammar" depends="init" unless="${skip.antlr}">
	
		<uptodate property="parser-is-uptodate">
			<sourcefiles basedir="src/Boo.Lang.Parser">
				<include name="boo.g" />
				<include name="booel.g" />
			</sourcefiles>
			<targetfiles basedir="src/Boo.Lang.Parser">
				<include name="BooParserBase.cs" />
				<include name="BooExpressionLexer.cs" />
			</targetfiles>
		</uptodate>

		<if test="${not parser-is-uptodate}">
		
			<delete>
				<fileset basedir="src/Boo.Lang.Parser">
					<include name="*TokenTypes.*" />
				</fileset>
			</delete>			 
			
			<exec program="${java}" failonerror="true">				
				<arg value="-cp" />
				<arg value="${antlr.jar}" />
				<arg value="antlr.Tool" />
				<!-- <arg value="-traceParser" /> -->
				<arg value="-o" />
				<arg value="src/Boo.Lang.Parser/" />
				<arg value="src/Boo.Lang.Parser/boo.g" />
			</exec>
			
			<exec program="${java}" failonerror="true">
				<arg value="-cp" />
				<arg value="${antlr.jar}" />
				<arg value="antlr.Tool" />
				<arg value="-o" />
				<arg value="src/Boo.Lang.Parser/" />
				<arg value="src/Boo.Lang.Parser/booel.g" />
			</exec>
			
			<touch file="src/Boo.Lang.Parser/BooParserBase.cs" />
		</if>
	</target>
	
	<target name="generate-ast" depends="init" unless="${skip.ast}">
	
		<uptodate property="ast-is-uptodate">
			<sourcefiles>
				<include name="ast.model.boo" />
				<include name="scripts/astgen.boo" />
			</sourcefiles>
			<targetfiles>
				<include name="src/Boo.Lang.Compiler/Ast/Impl/CompileUnitImpl.cs" />
			</targetfiles>
		</uptodate>
				
		<if test="${not ast-is-uptodate}">
			<delete dir="src/Boo.Lang.Compiler/Ast/Impl"
					if="${directory::exists('src/Boo.Lang.Compiler/Ast/Impl')}" />
			<mkdir dir="src/Boo.Lang.Compiler/Ast/Impl" />
			<exec program="bin/booi.exe" useruntimeengine="true">
				<arg value="scripts/astgen.boo" />
			</exec>			
		</if>
	</target>

	<target name="rebuild" depends="clean">
		
		<touch file="ast.model.boo" />
		<touch file="src/Boo.Lang.Parser/boo.g" />
		<touch file="src/Boo.Lang.Parser/booel.g" />
		
		<call target="all" />		
	</target>
	
	<target name="clean">
		<delete dir="build" failonerror="false" />
	</target>

	<target name="init">
		<mkdir dir="build" />
	</target>

</project>

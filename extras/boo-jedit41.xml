<?xml version="1.0"?>

<!DOCTYPE MODE SYSTEM "xmode.dtd">

<!-- boo mode, by Rodrigo B. de Oliveira based on python mode -->
<!-- by Slava Pestov. Based on PythonTokenMarker by -->
<!-- Jonathan Revusky -->

<!--
JEdit Catalog Entry: <MODE NAME="boo" FILE="boo-jedit41.xml" FILE_NAME_GLOB="*.boo" />
-->

<MODE>
	<PROPS>
		<PROPERTY NAME="indentNextLines" VALUE="\s*[^#]{3,}:\s*(#.*)?" />
		<PROPERTY NAME="commentStart" VALUE="/*" />
		<PROPERTY NAME="commentEnd" VALUE="*/" />		
		<PROPERTY NAME="lineComment" VALUE="(#|//)" />
		<PROPERTY NAME="wordBreakChars" VALUE="([{" />
	</PROPS>	
	<RULES
		ESCAPE="\" IGNORE_CASE="FALSE"
		HIGHLIGHT_DIGITS="TRUE"
		DIGIT_RE="(\d(\d|_)*(\.\d(\d|_)*)?((e|E)(\+|-)?\d(\d|_)*)?(\w+)?)|(0x([A-Fa-f]|\d)+(l|L)?)"
		>
		<!-- Comment -->
		<EOL_SPAN TYPE="COMMENT1">#</EOL_SPAN>
		<EOL_SPAN TYPE="COMMENT1">//</EOL_SPAN>
		<SPAN TYPE="COMMENT2">
			<BEGIN>/*</BEGIN>
			<END>*/</END>
		</SPAN>

		<!-- Triple-quotes -->
		<SPAN TYPE="LITERAL1" DELEGATE="string">
			<BEGIN>"""</BEGIN>
			<END>"""</END>
		</SPAN>

		<SPAN TYPE="LITERAL2">
			<BEGIN>'''</BEGIN>
			<END>'''</END>
		</SPAN>

		<!-- Standard literals -->
		<SPAN TYPE="LITERAL1" NO_LINE_BREAK="TRUE" DELEGATE="string">
			<BEGIN>"</BEGIN>
			<END>"</END>
		</SPAN>
		<SPAN TYPE="LITERAL2" NO_LINE_BREAK="TRUE">
			<BEGIN>'</BEGIN>
			<END>'</END>
		</SPAN>
		
		<SEQ_REGEXP TYPE="MARKUP"
                        HASH_CHAR="/"
                        AT_WORD_START="TRUE"
                >/[^[:blank:]]*?[^\\]/</SEQ_REGEXP>

		
		<!--
		<SEQ TYPE="OPERATOR">:</SEQ>
		<SEQ TYPE="OPERATOR">[</SEQ>
		<SEQ TYPE="OPERATOR">]</SEQ>
		<SEQ TYPE="OPERATOR">{</SEQ>
		<SEQ TYPE="OPERATOR">}</SEQ>
		<SEQ TYPE="OPERATOR">(</SEQ>
		<SEQ TYPE="OPERATOR">)</SEQ>
		-->
		<SEQ TYPE="OPERATOR">=~</SEQ>
		<SEQ TYPE="OPERATOR">=</SEQ>
		<SEQ TYPE="OPERATOR">!=</SEQ>
		<SEQ TYPE="OPERATOR">!</SEQ>
		<SEQ TYPE="OPERATOR">&gt;=</SEQ>
		<SEQ TYPE="OPERATOR">&lt;=</SEQ>
		<SEQ TYPE="OPERATOR">++</SEQ>
		<SEQ TYPE="OPERATOR">--</SEQ>		
		<SEQ TYPE="OPERATOR">+</SEQ>
		<SEQ TYPE="OPERATOR">-</SEQ>
		<SEQ TYPE="OPERATOR">+=</SEQ>
		<SEQ TYPE="OPERATOR">-=</SEQ>
		<SEQ TYPE="OPERATOR">/</SEQ>
		<SEQ TYPE="OPERATOR">%</SEQ>
		<SEQ TYPE="OPERATOR">*</SEQ>
		<SEQ TYPE="OPERATOR">/=</SEQ>
		<SEQ TYPE="OPERATOR">%=</SEQ>
		<SEQ TYPE="OPERATOR">*=</SEQ>
		<SEQ TYPE="OPERATOR">&gt;</SEQ>
		<SEQ TYPE="OPERATOR">&lt;</SEQ>
		<SEQ TYPE="OPERATOR">%</SEQ>
		<SEQ TYPE="OPERATOR">&amp;</SEQ>
		<SEQ TYPE="OPERATOR">|</SEQ>
		<SEQ TYPE="OPERATOR">^</SEQ>

		<MARK_PREVIOUS TYPE="FUNCTION"
			EXCLUDE_MATCH="TRUE">(</MARK_PREVIOUS>

		<KEYWORDS>
			<!--  Reserved Words  -->
			<KEYWORD1>abstract</KEYWORD1>
			<KEYWORD1>and</KEYWORD1>
			<KEYWORD1>as</KEYWORD1>			
			<KEYWORD1>break</KEYWORD1>
			<KEYWORD1>callable</KEYWORD1>
			<KEYWORD1>cast</KEYWORD1>			
			<KEYWORD1>class</KEYWORD1>			
			<KEYWORD1>const</KEYWORD1>
			<KEYWORD1>constructor</KEYWORD1>
			<KEYWORD1>destructor</KEYWORD1>
			<KEYWORD1>continue</KEYWORD1>
			<KEYWORD1>def</KEYWORD1>
			<KEYWORD1>do</KEYWORD1>
			<KEYWORD1>elif</KEYWORD1>
			<KEYWORD1>else</KEYWORD1>
			<KEYWORD1>end</KEYWORD1>
			<KEYWORD1>enum</KEYWORD1>
			<KEYWORD1>ensure</KEYWORD1>
			<KEYWORD1>event</KEYWORD1>
			<KEYWORD1>except</KEYWORD1>
			<KEYWORD1>final</KEYWORD1>
			<KEYWORD1>for</KEYWORD1>
			<KEYWORD1>from</KEYWORD1>
			<KEYWORD1>given</KEYWORD1>
			<KEYWORD1>get</KEYWORD1>
			<KEYWORD1>if</KEYWORD1>			
			<KEYWORD1>interface</KEYWORD1>
			<KEYWORD1>in</KEYWORD1>
			<KEYWORD1>include</KEYWORD1>
			<KEYWORD1>import</KEYWORD1>
			<KEYWORD1>is</KEYWORD1>
			<KEYWORD1>isa</KEYWORD1>
			<KEYWORD1>mixin</KEYWORD1>
			<KEYWORD1>partial</KEYWORD1>
			<KEYWORD1>namespace</KEYWORD1>
			<KEYWORD1>not</KEYWORD1>
			<KEYWORD1>of</KEYWORD1>
			<KEYWORD1>or</KEYWORD1>
			<KEYWORD1>otherwise</KEYWORD1>
			<KEYWORD1>override</KEYWORD1>
			<KEYWORD1>pass</KEYWORD1>
			<KEYWORD1>raise</KEYWORD1>
			<KEYWORD1>ref</KEYWORD1>
			<KEYWORD1>retry</KEYWORD1>
			<KEYWORD1>self</KEYWORD1>
			<KEYWORD1>struct</KEYWORD1>			
			<KEYWORD1>return</KEYWORD1>
			<KEYWORD1>set</KEYWORD1>
			<KEYWORD1>success</KEYWORD1>
			<KEYWORD1>try</KEYWORD1>
			<KEYWORD1>transient</KEYWORD1>
			<KEYWORD1>virtual</KEYWORD1>
			<KEYWORD1>while</KEYWORD1>
			<KEYWORD1>when</KEYWORD1>			
			<KEYWORD1>unless</KEYWORD1>
			<KEYWORD1>yield</KEYWORD1>
			<KEYWORD1>ref</KEYWORD1>
			
			<KEYWORD1>public</KEYWORD1>
			<KEYWORD1>protected</KEYWORD1>
			<KEYWORD1>private</KEYWORD1>
			<KEYWORD1>internal</KEYWORD1>
			<KEYWORD1>static</KEYWORD1>
			
			<KEYWORD2>bool</KEYWORD2>
			<KEYWORD2>regex</KEYWORD2>
			<KEYWORD2>string</KEYWORD2>
			<KEYWORD2>object</KEYWORD2>
			<KEYWORD2>duck</KEYWORD2>
			<KEYWORD2>byte</KEYWORD2>
			<KEYWORD2>sbyte</KEYWORD2>
			<KEYWORD2>short</KEYWORD2>
			<KEYWORD2>ushort</KEYWORD2>
			<KEYWORD2>int</KEYWORD2>
			<KEYWORD2>char</KEYWORD2>
			<KEYWORD2>uint</KEYWORD2>
			<KEYWORD2>long</KEYWORD2>
			<KEYWORD2>ulong</KEYWORD2>
			<KEYWORD2>single</KEYWORD2>
			<KEYWORD2>double</KEYWORD2>
			<KEYWORD2>decimal</KEYWORD2>
			<KEYWORD2>date</KEYWORD2>
			<KEYWORD2>timespan</KEYWORD2>
			<KEYWORD2>void</KEYWORD2>

			<!-- builtins -->			
			<KEYWORD1>iif</KEYWORD1>
			<KEYWORD3>len</KEYWORD3>
			<KEYWORD3>__addressof__</KEYWORD3>			
			<KEYWORD3>__eval__</KEYWORD3>
			<KEYWORD3>__switch__</KEYWORD3>
			<KEYWORD3>typeof</KEYWORD3>
			<KEYWORD3>assert</KEYWORD3>
			
			<KEYWORD3>array</KEYWORD3>
			<KEYWORD3>matrix</KEYWORD3>

			<KEYWORD3>print</KEYWORD3>
			<KEYWORD3>gets</KEYWORD3>
			<KEYWORD3>prompt</KEYWORD3>
			<KEYWORD3>enumerate</KEYWORD3>
			<KEYWORD3>zip</KEYWORD3>
			<KEYWORD3>filter</KEYWORD3>
			<KEYWORD3>map</KEYWORD3>
			<KEYWORD3>join</KEYWORD3>
			<KEYWORD3>cat</KEYWORD3>
			<KEYWORD3>iterator</KEYWORD3>
			<KEYWORD3>shell</KEYWORD3>
			<KEYWORD3>abs</KEYWORD3>
			
			<!-- standard macros and attributes -->
			<KEYWORD3>using</KEYWORD3>
			<KEYWORD3>lock</KEYWORD3>
			<KEYWORD3>required</KEYWORD3>
			<KEYWORD3>getter</KEYWORD3>
			<KEYWORD3>setter</KEYWORD3>
			<KEYWORD3>property</KEYWORD3>
			<KEYWORD3>checked</KEYWORD3>
			<KEYWORD3>unchecked</KEYWORD3>
			<KEYWORD3>rawArrayIndexing</KEYWORD3>
			<KEYWORD3>normalArrayIndexing</KEYWORD3>
			<KEYWORD3>yieldAll</KEYWORD3>

			<!-- exceptions -->
			<!-- KEYWORD3>ArithmeticError</KEYWORD3 -->
			
			<LITERAL2>false</LITERAL2>
			<LITERAL2>null</LITERAL2>
			<LITERAL2>self</LITERAL2>
			<KEYWORD2>super</KEYWORD2>
			<LITERAL2>true</LITERAL2>
		</KEYWORDS>
	</RULES>
	
	<RULES SET="string" DEFAULT="LITERAL1">
		<SPAN TYPE="LITERAL2">
			<BEGIN>${</BEGIN>
			<END>}</END>
		</SPAN>
	</RULES>
</MODE>


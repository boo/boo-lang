<?xml version="1.0"?>
<project name="tests" default="run">

	<include buildfile="nunit.inc" />

	<target name="run" depends="compile" if="${nant.tasks.nunit2}">

		<copy todir="${path::get-temp-path()}" file="build/BooCompiler.Tests.dll" overwrite="true" />

		<property name="fixture" value="" dynamic="true" />
		<property name="num-tests" value="0" />
		<property name="current-test" value="1" />
		<property name="succeeded-tests" value="0" />
		<foreach item="File" property="filename" failonerror="true">
			<in>
				<items basedir="build">
					<include name="*.Tests.dll" if="${fixture == ''}" />
					<include name="${fixture}.Tests.dll" if="${fixture != ''}" />
				</items>
			</in>
			<do>
				<property name="num-tests" value="${int::parse(num-tests)+1}" />
			</do>
		</foreach>

		<fail if="${int::parse(num-tests) == 0}">
		There is no test to run!
		</fail>
	
		<foreach item="File" property="filename">
			<in>
				<items basedir="build">
					<include name="*.Tests.dll" if="${fixture == ''}" />
					<include name="${fixture}.Tests.dll" if="${fixture != ''}" />
				</items>
			</in>
			<do failonerror="false">
				<echo message="[${current-test}/${num-tests}] ${path::get-file-name(filename)}" />
				<property name="current-test" value="${int::parse(current-test)+1}" />
				<nunit2>
					<formatter type="Plain" />
					<test>
						<assemblies basedir="build">
							<include name="${path::get-file-name(filename)}" />
						</assemblies>
					</test>
				</nunit2>
				<property name="succeeded-tests" value="${int::parse(succeeded-tests)+1}" />
			</do>
		</foreach>
		<fail message="${int::parse(num-tests) - int::parse(succeeded-tests) } TEST FIXTURES HAVE FAILED"
			if="${int::parse(succeeded-tests) &lt; int::parse(num-tests)}" />

	</target>

	<target name="compile" depends="init">

		<boo src="generate_regression.boo">
			<references basedir="build">
				<include name="Boo.Lang.Useful.dll" />
				<include name="Boo.Lang.Compiler.dll" />
			</references>
		</boo>

		<booc
			target="library"
			output="build/BooModules.dll">

			<sources basedir="BooModules">
				<include name="*.boo" />
			</sources>
		</booc>

		<!--
		<booc
			target="library"
			output="build/BooMacros.dll">

			<sources basedir="BooMacros">
				<include name="*.boo" />
			</sources>
		</booc>
		-->

		<csc
			target="library"
			output="build/Boo.Lang.Runtime.Tests.dll"
			unsafe="true">

			<sources basedir="Boo.Lang.Runtime.Tests">
				<include name="**/*.cs" />
			</sources>

			<references basedir="build">
				<include name="${nunit.framework.dll}" />
				<include name="Boo.Lang.dll" />
				<include name="Boo.Lang.Compiler.dll" />
				<include name="Boo.Lang.Parser.dll" />
			</references>
		</csc>

		<csc
			target="library"
			output="build/BooCompiler.Tests.dll"
			unsafe="true">

			<sources basedir="BooCompiler.Tests">
				<include name="**/*.cs" />
				<exclude name="*TestFixture.cs" />
			</sources>

			<references basedir="build">
				<include name="${nunit.framework.dll}" />
				<include name="Boo.Lang.dll" />
				<include name="Boo.Lang.Compiler.dll" />
				<include name="Boo.Lang.Extensions.dll" />
				<include name="BooModules.dll" />
			</references>
		</csc>

		<foreach item="File" property="filename">
			<in>
				<items basedir="BooCompiler.Tests">
					<include name="*TestFixture.cs" />
					<exclude name="AbstractCompilerErrorsTestFixture.cs" />
				</items>
			</in>
			<do>
				<csc
					target="library"
					output="build/BooCompiler.${string::replace(path::get-file-name(filename),'TestFixture.cs','')}.Tests.dll"
					unsafe="true">

					<sources basedir="BooCompiler.Tests">
						<include name="${path::get-file-name(filename)}" />
						<include name="AbstractCompilerErrorsTestFixture.cs" />
					</sources>

					<references basedir="build">
						<include name="${nunit.framework.dll}" />
						<include name="Boo.Lang.dll" />
						<include name="Boo.Lang.Compiler.dll" />
						<include name="Boo.Lang.Extensions.dll" />
						<include name="BooModules.dll" />
						<include name="BooCompiler.Tests.dll" />
					</references>
				</csc>
			</do>
		</foreach>

		<booc
			target="library"
			output="build/Boo.Lang.Tests.dll">

			<sources basedir="Boo.Lang.Tests">
				<include name="**/*.boo" />
			</sources>

			<references>
				<include name="${nunit.framework.dll}" />
			</references>
		</booc>

		<booc
			target="library"
			output="build/Boo.Lang.Useful.Tests.dll">

			<sources basedir="Boo.Lang.Useful.Tests">
				<include name="**/*.boo" />
			</sources>

			<references basedir="build">
				<include name="${nunit.framework.dll}" />
				<include name="Boo.Lang.Compiler.dll" />
				<include name="Boo.Lang.Useful.dll" />
			</references>
		</booc>

		<booc
			target="library"
			output="build/Boo.Lang.Compiler.Tests.dll">

			<sources basedir="Boo.Lang.Compiler.Tests">
				<include name="**/*.boo" />
			</sources>

			<references basedir="build">
				<include name="${nunit.framework.dll}" />
				<include name="Boo.Lang.Compiler.dll" />
			</references>
		</booc>

		<booc
			target="library"
			output="build/BooCompilerResources.Tests.dll">

			<sources basedir="BooCompilerResources.Tests">
				<include name="**/*.boo" />
			</sources>

			<references>
				<include name="${nunit.framework.dll}" />
			</references>
		</booc>

		<booc
			target="library"
			output="build/Boo.Lang.Interpreter.Tests.dll">

			<sources basedir="Boo.Lang.Interpreter.Tests">
				<include name="**/*.boo" />
			</sources>

			<references basedir="build">
				<include name="Boo.Lang.Interpreter.dll" />
				<include name="Boo.Lang.Compiler.dll" />
				<include name="${nunit.framework.dll}" />
			</references>
		</booc>

		<booc
			target="library"
			output="build/Boo.Lang.CodeDom.Tests.dll">

			<sources basedir="Boo.Lang.CodeDom.Tests">
				<include name="**/*.boo" />
			</sources>

			<references basedir="build">
				<include name="Boo.Lang.CodeDom.dll" />
				<include name="${nunit.framework.dll}" />
			</references>
		</booc>

		<csc
			target="library"
			output="build/Boo.Lang.Parser.Tests.dll">

			<sources>
				<include name="Boo.Lang.Parser.Tests/**/*.cs" />
				<include name="build/ParserRoundtripTestFixture.cs" />
				<include name="build/WSAParserRoundtripTestFixture.cs" />
			</sources>

			<references basedir="build">
				<include name="${nunit.framework.dll}" />
				<include name="BooCompiler.Tests.dll" />
				<include name="Boo.Lang.Compiler.dll" />
				<include name="Boo.Lang.Parser.dll" />
			</references>
		</csc>
	</target>

	<target name="init">
		<delete dir="build" if="${directory::exists('build')}" />
		<mkdir dir="build" />
		<copy todir="build" overwrite="true">
			<fileset basedir="../build">
				<include name="*.dll" />
				<include name="*.pdb" />
				<include name="boo*.exe" />
				<include name="*.config" />
				<include name="*.targets" />
				<include name="pt/*.dll" />
			</fileset>
		</copy>
		<copy todir="${path::get-temp-path()}" overwrite="true">
			<fileset basedir="../build">
				<include name="*.dll" />
				<include name="*.pdb" />
				<include name="boo*.exe" />
				<include name="*.config" />
				<include name="*.targets" />
				<include name="pt/*.dll" />
			</fileset>
		</copy>
		<copy todir="build" file="${nunit.framework.dll}" />
		<loadtasks assembly="build/Boo.NAnt.Tasks.dll" />
		<echo message="Starting boo tests.  Running in framework: ${nant.settings.currentframework}" />
	</target>
</project>


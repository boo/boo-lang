* fix event handling
	* __eval__
	* delegate1.boo
	* delegate2.boo
	* delegate3.boo
	* delegate4.boo

* fix ICallable for callable types
	* callable7.boo
	* callable8.boo
	* callable6.boo
	* callable9.boo
	
* software de blogging para a apresentação
	* modelo de objetos simples com Bamboo.Prevalence
	* editor web com autenticação forms
	* editor RichClient
	* segurança com par chave pública/privada

* callable type adaptation

* addressof cannot be used outside delegate constructors

* anonymous callable type notation
	def map(fn as callable(object) as object, enumerable)
	def map(fn as (object)->object, enumerable)
	def map(fn as object->object, enumerable)
	
* rever os exemplos de pipeline

* map(callable, enumerable)

* generator expressions
	return i*3 for i in range(10)
	
* Exemplo de passo com estatísticas sobre membros utilizados
	* summary of class status (http://www.go-mono.com/class-status.html)

* preencher assinatura dos métodos em BindTypeMembers
	* completar tipo dos parâmetros
	* completar return type:
		* completar para unknown caso o método possua returns
		* completar para void caso o método nao possua returns

* InjectCasts
	* simplificar EmitAssembly

* ProcessMethodBodies.LeaveConstructor deve inserir a chamado ao constructor
super APÓS qualquer validação

* final fields: se for um value type nativo fica como literal, senao fica
como campo readonly

* um novo passo para checagem de visibilidade de acesso de membros

* check visibility for override

* promoção de bool para int32 e conversão automática de int32 para bool:
	* and
	* or

* += para eventos vira add_Event(DelegateConstructor(..., ...))

* ref, out parameters

* cache da resolução de nomes entre compilações

* operador de escopo :: para acessar nomes a partir do namespace global

* artigo "Estendendo a linguagem utilizando macros e atributos"
	using, lock

* private interface implementations

	class Foo(IDisposable):
		def IDisposable.Dispose():
			print("Dispose")

	método fica marcado como private...

* booi: opçoes e um único script
	* booi /c:pt-BR /r:Foo.dll /i:aux.boo foo.boo 1 2 3
		argv do script seria (1, 2, 3), os argumentos que ocorrem
		antes do primeiro nome simples de arquivo (foo.boo) seriam
		consumidos pelo próprio booi

* tipos callable implementam equivalência estrutural, assim, um tipo callable
que é wrapper sobre um método qualquer, lembra o método, seus tipos de parâmetro e
valor de retorno e pode ser utilizado na propagação de checagem de tipos, etc

* nomes de tipo primitivo podem ser utilizados em conversões:

	int(Enum.Value), int("foo"), int(3.0)

* criar primitivas box, unbox e __reference__ para o semantic step e outros passos
que precisarem? Isso iria permitir remover os casts de EmitAssemblyStep

	__box__(3.0) => pode ser substituído por cast(object, 3.0)
	__unbox__(reference, int) => pode ser substituído por cast(int, reference)
	__assertIsReference__(expression) # para uso por macros como lock por exemplo

* ITypeBinding.GetDefaultMember() as IBinding => ITypeBinding.GetDefaultMembers() as (IBinding)

* print macro

* assert macro

* singleline try (catchall):

	try CloseConnection()
		|
		V
	try:
		CloseConnection()
	except:
		pass

* private base method implementations:
	class Foo(Base):
		override def Base.Method():
			super()

* assembly attributes: [assembly: AssemblyVersion("foo")]

* module attributes: [module: ]

* raise sem parâmetros dentro de um except:
	try:
		raise "foo"
	except:
		raise // reraise current exception

* modo MACRO de compilação (ver macro.boo)

* macros para o SharpDevelop em boo

* unboxing deve fazer conversão numérica

* BooPrinterVisitor deve imprimir as declaraçoes de variáveis locais?

* resolução de tipos em MethodInvocationExpression quando existe um nome no mesmo
escopo mas que não resolve para um tipo, exemplo, tipo Size dentro de um classe
derivada de Control (que tem uma propriedade chamada Size):
	* uma solução possível:
		* OnMethodInvocationExpression antes de resolver o target liga uma flag
		dizendo que o nome (quando uma referência) deve ser resolvido
		para todas as suas possibilidades; assim, temos um AmbiguousBinding
		que pode ser resolvido (levando em conta primariamente a capacidade
		de ser chamado ou não);

* StatementGroup para permitir o agrupamento de statements com mesmo propósito


Milestone 3.8
-------------
* ? for deve criar um try { } finally { RuntimeServices.DisposeEnumerator(iterator); }
* float literals: 3.0f
* hexadecimal integer literals: 0x01
* binary literals: 0b001

Milestone 3.9 (better error checking)
-------------------------------------
* constructors can't return values
* constructors can't yield values
* static constructors must be public
* static constructors cannot declare parameters
* can't create instance of interface 'XXX'
* can't create instance of abstract class 'XXX'
* can't create instance of enum 'XXX'
* class 'XXX' already has a definition for a member 'YYY' with the signature 'ZZZ'
* symbols starting with '__', 'get_', 'set_', 'add_' and 'remove_' are reserved by the compiler
* WARNING: unused local variable
* WARNING: local 'xx' is used before initialization
* WARNING: property getter should return a value
* WARNING: unreachable code detected
* WARNING: right hand side of 'is' operator is a type reference, are you sure you don't want to use 'isa' instead?
* WARNING: performance hit: equality operator with object references
* WARNING: expressions in iterators can't have locally visible side-effects
	def foo(value as int):
		return ++value*i for i in range(10)
* WARNING: class does not override abstract member 'XXX.YYY' and will be marked abstract
* WARNING: class does not implement interface member 'XXX.YYY' and will be marked abstract

* method override with different accessibility
* override accessibility checks
done * inheritance cycles (A(B), B(C), C(A))
* CompilerParameters.Properties (passed in the command line as -D:name=value just like nant)
* warning levels

Milestone 4 (documentation)
------------------------------
* documentation step: generates .xml files for ndoc
* docbook Step (generates docbook files with all the documentation)

Milestone 4.3 (algumas otimizações)
---------------------------
* statically typed IEnumerator pattern
* compilador deve entender o atributo [EnumeratorItemType(typeof(string))] para TextFile e StreamReaderEnumerator
e declarar os tipos de acordo
*  patterns ((in|is|isa) (not)?) (value1, value2), em outras palavras:
	BinaryExpression(
		BinaryOperatorType.*,
		ReferenceExpression,
		TupleLiteralExpression)
	devem ser transformados em:

		((reference == value1) or (reference == value2))
		((reference is value1) or (reference is value2))
		etc


Milestone 5
-----------

* operadores de conversão (operator bool, operator string, etc)

Milestone 6 (dynamic behavior)
------------------------------

* array equality even for object references:
	a1 as object = (1, 2)
	a2 as object = (1, 2)
	assert a1 == a2

Milestone 7
-----------

* runtime objects
foo = runtimeobject("InternetExplorer.Application")
foo.Navigate2("www.foo.bar")

Exemplos/Artigos
----------------

* PreAttribute:

	[pre(n > 0)]
	def fatorial(n as int):
		return n*fatorial(n-1) if n > 1
		return 1

Otimiza��es
-----------
* otimização para chamadas a array.Length
* array unpacking trocar unpacking for vários expressionstatement(binary expression):
	a, b, = 1, 2
	por
	a = 1
	b = 2

	criar para isso um novo tipo de statement que pode ser utilizado no lugar de
	qualquer outro statement:
		class StatementGroup(Statement):
			Statements as StatementCollection

* tail call prefix para funçoes recursivas com a ScanDirectories do rgrep.boo

* os métodos com yield e métodos que retornam iterators como enumerate devem
marcar o tipo retornado por IEnumerator.Current de forma que o compilador
possa otimizar a utilizaçao de tais itens (no caso do enumerate, o compilador
saberia que sempre estaria lidando com um array e poderia gerar um unpacking
otimizado, etc);
* const expression unfolding
* proper tail recursion (fatorial)
done * for item in array/array => traduzir indexaçãoo direta do array com checagem de
bounds, o JIT é capaz de detectar esses patterns e otimizar o c�digo de acordo

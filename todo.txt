Please refer to our issue tracker at

 	http://jira.codehaus.org/secure/BrowseProject.jspa?id=10671
 	
for open issues.


Named parameters:
	def logHistoryFile(to: [required] fname, since: startDate as date):
		print fname
		
	logHistoryFile(to: "foo.txt", since: date.Now - 10s)

All the issues on this file will be eventually moved there.

* optimize InitializeNameResolution step and NameResolutionService
	* NamespaceEntity.IsModule(Type)
	* NamespaceEntity.Add(Type)
	* NamespaceEntity.GetChildNamespace(string)
	* OrganizeAssemblyTypes(Assembly)

* split RuntimeServices

* InjectCasts
	* simplificar EmitAssembly

* ProcessMethodBodies.LeaveConstructor deve inserir a chamado ao constructor
super APÓS qualquer validação:
	* criar um StatementGroup com uma propriedade Priority	
		* Body.InsertIntoGroup(groupPriority, index, Statement)
		* Body.AddToGroup(groupPriority, Statement)
		* sentenças normais são consideradas com prioridade 10
		* validação de parâmetros pode ser inserida com prioridade 0
		* chamada ao constructor super com prioriedade 1

* cache da resolução de nomes entre compilações

* nomes de tipo primitivo podem ser utilizados em conversões:

	int(Enum.Value), int("foo"), int(3.0)

* ITypeBinding.GetDefaultMember() as IBinding => ITypeBinding.GetDefaultMembers() as (IBinding)

* private base method implementations:
	class Foo(Base):
		override def Base.Method():
			super()
* macros para o SharpDevelop em boo

* resolução de tipos em MethodInvocationExpression quando existe um nome no mesmo
escopo mas que não resolve para um tipo, exemplo, tipo Size dentro de um classe
derivada de Control (que tem uma propriedade chamada Size):
	* uma solução possível:
		* OnMethodInvocationExpression antes de resolver o target liga uma flag
		dizendo que o nome (quando uma referência) deve ser resolvido
		para todas as suas possibilidades; assim, temos um AmbiguousBinding
		que pode ser resolvido (levando em conta primariamente a capacidade
		de ser chamado ou não);

* StatementGroup para permitir o agrupamento de statements com mesmo propósito
* float literals: 3.0f
* binary literals: 0b001
* WARNING: property getter should return a value
* CompilerParameters.Properties (passed in the command line as -D:name=value just like nant)
* warning levels
* statically typed IEnumerator pattern
*  patterns ((in|is|isa) (not)?) (value1, value2), em outras palavras:
	BinaryExpression(
		BinaryOperatorType.*,
		ReferenceExpression,
		TupleLiteralExpression)
	devem ser transformados em:

		((reference == value1) or (reference == value2))
		((reference is value1) or (reference is value2))
		etc
* operadores de conversão (operator bool, operator string, etc)
* PreAttribute:

	[pre(n > 0)]
	def fatorial(n as int):
		return n*fatorial(n-1) if n > 1
		return 1

Optimizations
-----------
* otimização para chamadas a array.Length
* tail call prefix para funçoes recursivas com a ScanDirectories do rgrep.boo
* const expression unfolding
* proper tail recursion (fatorial)
